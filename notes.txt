Design Decisions.

- Storing data in in-memory database or in a hashtable? I would go with in-memory database. Because if I use hashtable then my state is tied to an instance of a server. This makes scaling up tricky.


/*
HTML5 video JS controls.
Link to Video Mapping
sockets to link mapping

UX tradeoff
- pause everyone when new person joins to sync everyone.
- or let everyone be out of sync and let them catch up on their own.
*/

Okay, so what do I need to do?
- Add the joining functionality to a link. People can join through link. They are shown a webpage where they can see, this user joined/this user left. *only people in that room*.
- When a user clicks anywhere in the screen, everyone *in that room* is notified of the click.
- In the joining functionality the youtube video starts playing for everyone from the start.
- When someone pauses/plays the video, everyone else's video pauses/plays. - not synced.
- We keep track of state, so that when a new person joins, they can catch up to the current state.
    - When a user first joins, do we automatically start playing the video or do we wait for them to click play?

- do we store data in the DB, or do we create socket name using the video ID?
    - I paste the video link, and a uuid is created.
        - the backend received on-connection event. Data will be the uuid.
        - I will check if a room with this uuid exists(same map as the uuid to video link), create a new room with the uuid. and add this socket to that room. and update a map that stores the mapping between socket -> room.
        - When I receive a play message, I will check which room this socket exists in and broadcast to that room.
    - uuid is mapped to video link.
- 

- OKAY, SO HOW DO WE SYNC VIDEOS. 
    - Find out how to play/pause and seek video in youtube API. I have the handlers. If I play/pause based on someone's actions. When other videos are played/paused. 
     -Let's start with basic - start, timestamp. Pause, timestamp.


- How to handle different buffer speeds?
    - Play/Pause synchronization
    - adaptive bitrate streaming
    - network conn. indicators.
- Clock drift, if I am storing last timestamp for late joiners.
    - often within a few ms, which is fine in our case.

- I have just added external controls from a demo app on github.
- Todo:
    - Figure out why am I not seeing the seek bar.
        - Seek bar fixed and I am able to sync seek.
    - Sync play and pause.
        - done but without timestamps.


Note:
- Not leaving the room when disconnected. The internal mapping in socket.io library will likely keep growing. With more time, I would have mapped the socket to the room and removed the socket from the room when disconnected.
- To allow new joinees to see the updated video state, I had to choose between two design decisions.
    1. Keep broadcasting the current play time to the room, as the video is playing. As soon as the new person will join the room, they will also receive the current play time and will be able to catch up.
    2. Keep track of when the video was last started or stopped and what was the status of the seek bar(called `seekVal`). Eg. If the video is paused, we will track that the status is paused and the seek bar is at 5% - seekVal = 0.05. If the video is played, we will track the same information. This way, when the new person joins, they will first check the the last play status. If the last recorded status is pause, then the seek the video to seekVal. If the last recorded status is play, then calculate the time elapsed, divide it by the total length of the video to find out how much you should add to `seekVal` to predict where the video would be. This approach is better because we send very minimal data.
- I send `seekVal` with every play and pause message. This way, members who might have gotten out of sync, have a chance to resync. They might see the video jump a little bit, but they will be in sync.
- Right now the state is being stored in a hashmap. If I had more time, I'd have liked to use an in-memory database like Redis. This way, I could have scaled up the server and the state would have been shared across all the instances of the server.
- To copy the link to clipboard, I have used a workaround from stackoverflow. I check if secure context if valid, if so use navigator.clipboard, otherwise a hacky workaround using document.execCommand. Source: https://stackoverflow.com/questions/71873824/copy-text-to-clipboard-cannot-read-properties-of-undefined-reading-writetext
- I only update the video when the user releases the seek slider. if I had more time, I would have experimented with updating the video as the user drags the slider. This would have given a more responsive feel to the user.


Questions:
- Do I need duration socket event now?
- Test the new way of getting video ID. splitting by &
- check if copy function can be taken out of watch function.
- if sessionId is not there redirect to home page.
- How are you using the leave event on the backend?
- Try running locally to see if you can get around the muting problem?
- Try removing other controls - video and space.
- What happens when video ends?
- What's going on with fullscreen?
- Hide other controls and debug data.
- Delete css
